#include<bits/stdc++.h>
using namespace std;

#define ll long long

ll n;

struct point
{
    ll x,y;

    bool operator < (point&p)
    {
        if(p.x==x) return y<p.y;
        else return x<p.x;
    }
    bool operator == (point&p)
    {
        return (x==p.x&&y==p.y);
    }
};

bool cw(point a,point b,point c)
{
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y)>0;
}

bool ccw(point a,point b,point c)
{
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y)<0;
}

bool collinear(point a,point b,point c)
{
    return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y)==0;
}

void convex_hull(vector<point>&p)
{
    if( p.size()<=2) return;

    sort(p.begin(),p.end());

    ll i ,n =p.size();

    point p1=p[0],p2=p[n-1];
    vector<point>up,down;

    up.push_back(p1);
    down.push_back(p1);
    
    for( ll i=1;i<n;i++)
    {
        if(!ccw(p1,p[i],p2)||i==n-1)
        {
            while(up.size()>=2&&ccw(up[up.size()-2],up[up.size()-1],p[i]))
            {
                up.pop_back();
            }
            up.push_back(p[i]);
        }
         if(!cw(p1,p[i],p2)||i==n-1)
        {
            while(down.size()>=2&& cw(down[down.size()-2],down[down.size()-1],p[i]))
            {
                down.pop_back();
            }
            down.push_back(p[i]);
        }
    }
        p.clear();
        for(ll i=0;i<up.size();i++)
        {
            p.push_back(up[i]);
        }
        for( ll i=0;i<down.size();i++)
        {
            p.push_back(down[i]);
        }
        sort(p.begin(),p.end());
        p.resize(unique(p.begin(),p.end())-p.begin());

        //for( auto x : p)
       // {
        //    cout<<x.x<<" "<<x.y<<endl;
        //}
}

int main()
{
	bool ans =true;
    cin>>n;
    vector<point>p(n);
    for(ll i=0;i<n;i++)
    {
        cin>>p[i].x>>p[i].y;
    }
    ll m; cin>>m;
    map<pair<int,int>,int>mp;

    for( ll i=0;i<m;i++)
    {
        point temp;
        cin>>temp.x>>temp.y;
        mp[{temp.x,temp.y}]++;
        p.push_back(temp);
    }
    convex_hull(p);
    for( auto x: p)
    {
        if(mp[{x.x,x.y}]>0)
        {
            cout<<"NO"<<endl;
            ans =false;
            break;
        }
       
    }
   if(ans==true) cout<<"YES"<<endl;

}