
count the n umber of bits to make subaaray of maximum one

Given an array of size n with 0s and 1s , flip at most k 0s to get the longest possible subarray of 1s.

Input Format
First Line : n, size of array and k Second Line : n space separated numbers (0s or 1s)

Constraints
n <= 10^5 0 <= k <= n

Output Format
First Line : Size of subarray Second Line : Array after flipping k 0s

Sample Input
10 2
1 0 0 1 0 1 0 1 0 1
Sample Output
5
1 0 0 1 1 1 1 1 0 1



#include <iostream>
using namespace std;

void findZeros(int *arr, int n, int k) {
    int wL = 0, wR = 0, bestWindow = 0, zeroCount = 0, bestL = 0;
    while(wR < n) {
        if(zeroCount<=k) {
            if(arr[wR] == 0) 
                zeroCount++;
            wR++;
        } 
        if(zeroCount>k) {
            if(arr[wL] == 0) 
                zeroCount--;
            wL++;
        }
        if((wR-wL) > bestWindow and (zeroCount<=k)) {
            bestWindow = wR-wL;
            bestL = wL;
        }
    }
    // cout<<bestWindow<<","<<wR<<","<<wL<<","<<bestL<<endl;
    cout<<bestWindow<<endl;
    for(int i=0;i<bestL;i++) {
        cout<<arr[i]<<" ";
    }
    for(int i=bestL;i<bestL+bestWindow;i++) {
        if(arr[i]==0)
            arr[i]=1;
        cout<<arr[i]<<" ";
    }
    for(int i=bestL+bestWindow;i<n;i++) {
        cout<<arr[i]<<" ";
    }
}

int main(int argc, char const *argv[])
{
    /* code */
    int n, k;
    cin>>n>>k;
    int *arr = new int[n];
    for(int i=0;i<n;i++) {
        cin>>arr[i];
    }

    findZeros(arr, n, k);
    return 0;
}

